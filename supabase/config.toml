
project_id = "kyxotvtinlpackztktxe"

[api]
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["public", "storage"]
# Extra schemas to add to the search_path of every request. public is always included.
extra_search_path = ["public", "extensions"]
# Maximum rows returns in a single REST request.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by the API to connect to the database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://localhost"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false

# Configure one of the supported SMS providers: `twilio`, `messagebird`, `vonage`, or `textlocal`.
[auth.sms]
enable_signup = true
enable_confirmations = false

# Use pre-defined map of phone number to OTP for testing.
[auth.sms.test_otp]
# 4152127777 = "123456"

# Enable and configure phone authentication provider.
[auth.phone]
enable_signup = true
enable_confirmations = false

# Use pre-defined map of phone number to OTP for testing.
[auth.phone.test_otp]
# 4152127777 = "123456"

# Configure External OAuth providers.
[auth.external.apple]
enabled = false
# client_id =
# secret =
# scopes = ["email", "name"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.azure]
enabled = false
# client_id =
# secret =
# url = "https://login.microsoftonline.com/tenant-id/oauth2/v2.0"
# scopes = ["email", "profile"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.bitbucket]
enabled = false
# client_id =
# secret =
# scopes = ["email", "account"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.discord]
enabled = false
# client_id =
# secret =
# scopes = ["identify", "email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.facebook]
enabled = false
# client_id =
# secret =
# scopes = ["email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.figma]
enabled = false
# client_id =
# secret =
# scopes = ["file_read"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.github]
enabled = false
# client_id =
# secret =
# scopes = ["email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.gitlab]
enabled = false
# client_id =
# secret =
# url = "https://gitlab.com"
# scopes = ["email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.google]
enabled = false
# client_id =
# secret =
# scopes = ["email", "profile"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.kakao]
enabled = false
# client_id =
# secret =
# scopes = []
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.keycloak]
enabled = false
# client_id =
# secret =
# url = ""
# scopes = ["email", "profile"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.linkedin]
enabled = false
# client_id =
# secret =
# scopes = ["openid", "profile", "email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.notion]
enabled = false
# client_id =
# secret =
# scopes = ["email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.twitch]
enabled = false
# client_id =
# secret =
# scopes = ["user:read:email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.twitter]
enabled = false
# client_id =
# secret =
# scopes = ["tweet.read", "users.read"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.slack]
enabled = false
# client_id =
# secret =
# scopes = ["openid", "email", "profile"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.spotify]
enabled = false
# client_id =
# secret =
# scopes = ["user-read-email"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[auth.external.workos]
enabled = false
# client_id =
# secret =
# url = ""
# scopes = ["email", "profile"]
# Additional query parameters to send along with the OAuth request.
# query_params = { connection = "", provider = "", organization = "" }

[auth.external.zoom]
enabled = false
# client_id =
# secret =
# scopes = ["user:read"]
# Additional query parameters to send along with the OAuth request.
# query_params = { key = "value" }

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends: `postgres`, `bigquery`, `clickhouse`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3-compatible storage backend)
orioledb_version = ""
# Enable Postgres server-side connection pooling.
pooler_enable = false
# Configure max number of connections for each user.
pooler_max_client_conn = 20
# Configure server-side pooling mode: `transaction` or `session`.
pooler_pool_mode = "transaction"
# Enable observability of pooler state with PgBouncer-style tables.
pooler_enable_stats = false
